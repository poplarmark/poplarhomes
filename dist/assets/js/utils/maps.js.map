{"version":3,"file":"maps.js","names":["initAutocomplete","map","google","maps","Map","document","getElementById","center","lat","lng","zoom","mapTypeId","input","searchBox","value","controls","ControlPosition","TOP_LEFT","push","addListener","setBounds","getBounds","markers","places","getPlaces","length","forEach","marker","setMap","bounds","LatLngBounds","place","geometry","location","console","log","icon","url","size","Size","origin","Point","anchor","scaledSize","Marker","title","name","position","viewport","union","extend","fitBounds","event","addDomListener","window"],"sources":["maps.js"],"mappings":"AAMA,SAASA,mBACP,MAAMC,EAAM,IAAIC,OAAOC,KAAKC,IAAIC,SAASC,eAAe,OAAQ,CAC9DC,OAAQ,CAAEC,KAAM,QAASC,IAAK,UAC9BC,KAAM,GACNC,UAAW,YAGPC,EAAQP,SAASC,eAAe,aAChCO,EAAYD,EAAME,MAExBb,EAAIc,SAASb,OAAOC,KAAKa,gBAAgBC,UAAUC,KAAKN,GAExDX,EAAIkB,YAAY,kBAAkB,KAChCN,EAAUO,UAAUnB,EAAIoB,YAAY,IAGtC,IAAIC,EAAU,GAIdT,EAAUM,YAAY,kBAAkB,KACtC,MAAMI,EAASV,EAAUW,YAEzB,GAAqB,GAAjBD,EAAOE,OACT,OAIFH,EAAQI,SAASC,IACfA,EAAOC,OAAO,KAAK,IAErBN,EAAU,GAGV,MAAMO,EAAS,IAAI3B,OAAOC,KAAK2B,aAE/BP,EAAOG,SAASK,IACd,IAAKA,EAAMC,WAAaD,EAAMC,SAASC,SAErC,YADAC,QAAQC,IAAI,uCAId,MAAMC,EAAO,CACXC,IAAKN,EAAMK,KACXE,KAAM,IAAIpC,OAAOC,KAAKoC,KAAK,GAAI,IAC/BC,OAAQ,IAAItC,OAAOC,KAAKsC,MAAM,EAAG,GACjCC,OAAQ,IAAIxC,OAAOC,KAAKsC,MAAM,GAAI,IAClCE,WAAY,IAAIzC,OAAOC,KAAKoC,KAAK,GAAI,KAIvCjB,EAAQJ,KACN,IAAIhB,OAAOC,KAAKyC,OAAO,CACrB3C,MACAmC,OACAS,MAAOd,EAAMe,KACbC,SAAUhB,EAAMC,SAASC,YAGzBF,EAAMC,SAASgB,SAEjBnB,EAAOoB,MAAMlB,EAAMC,SAASgB,UAE5BnB,EAAOqB,OAAOnB,EAAMC,SAASC,SAC/B,IAEFhC,EAAIkD,UAAUtB,EAAO,GAEzB,CAEA3B,OAAOC,KAAKiD,MAAMC,eAAeC,OAAQ,OAAQtD","sourcesContent":["// This example adds a search box to a map, using the Google Place Autocomplete\r\n// feature. People can enter geographical searches. The search box will return a\r\n// pick list containing a mix of places and predicted search terms.\r\n// This example requires the Places library. Include the libraries=places\r\n// parameter when you first load the API. For example:\r\n// <script src=\"https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places\">\r\nfunction initAutocomplete() {\r\n  const map = new google.maps.Map(document.getElementById(\"map\"), {\r\n    center: { lat: -33.8688, lng: 151.2195 },\r\n    zoom: 13,\r\n    mapTypeId: \"roadmap\",\r\n  });\r\n  // Create the search box and link it to the UI element.\r\n  const input = document.getElementById(\"pac_input\");\r\n  const searchBox = input.value;\r\n\r\n  map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);\r\n  // Bias the SearchBox results towards current map's viewport.\r\n  map.addListener(\"bounds_changed\", () => {\r\n    searchBox.setBounds(map.getBounds());\r\n  });\r\n\r\n  let markers = [];\r\n\r\n  // Listen for the event fired when the user selects a prediction and retrieve\r\n  // more details for that place.\r\n  searchBox.addListener(\"places_changed\", () => {\r\n    const places = searchBox.getPlaces();\r\n\r\n    if (places.length == 0) {\r\n      return;\r\n    }\r\n\r\n    // Clear out the old markers.\r\n    markers.forEach((marker) => {\r\n      marker.setMap(null);\r\n    });\r\n    markers = [];\r\n\r\n    // For each place, get the icon, name and location.\r\n    const bounds = new google.maps.LatLngBounds();\r\n\r\n    places.forEach((place) => {\r\n      if (!place.geometry || !place.geometry.location) {\r\n        console.log(\"Returned place contains no geometry\");\r\n        return;\r\n      }\r\n\r\n      const icon = {\r\n        url: place.icon,\r\n        size: new google.maps.Size(71, 71),\r\n        origin: new google.maps.Point(0, 0),\r\n        anchor: new google.maps.Point(17, 34),\r\n        scaledSize: new google.maps.Size(25, 25),\r\n      };\r\n\r\n      // Create a marker for each place.\r\n      markers.push(\r\n        new google.maps.Marker({\r\n          map,\r\n          icon,\r\n          title: place.name,\r\n          position: place.geometry.location,\r\n        })\r\n      );\r\n      if (place.geometry.viewport) {\r\n        // Only geocodes have viewport.\r\n        bounds.union(place.geometry.viewport);\r\n      } else {\r\n        bounds.extend(place.geometry.location);\r\n      }\r\n    });\r\n    map.fitBounds(bounds);\r\n  });\r\n}\r\n\r\ngoogle.maps.event.addDomListener(window, 'load', initAutocomplete);"]}