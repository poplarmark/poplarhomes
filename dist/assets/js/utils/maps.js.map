{"version":3,"file":"maps.js","names":["map","initMap","google","maps","Map","document","getElementById","center","lat","lng","zoom","input","autocomplete","places","Autocomplete","componentRestrictions","country","bindTo","marker","Marker","anchorPoint","Point","addListener","setVisible","place","getPlace","console","log","address_components","i","length","j","types","long_name","short_name","parsed_state","$","ready","val","parsed_city","parsed_street","parsed_zipcode","inputValue","formatted_address","geometry","viewport","setCenter","location","fitBounds","setPosition","join","window","alert","name"],"sources":["maps.js"],"mappings":"AAAA,IAAIA,IACJ,SAASC,UACPD,IAAM,IAAIE,OAAOC,KAAKC,IAAIC,SAASC,eAAe,OAAQ,CACxDC,OAAQ,CAAEC,KAAM,QAASC,IAAK,UAC9BC,KAAM,KAGR,IAGIC,EAAQN,SAASC,eAAe,aAChCM,EAAe,IAAIV,OAAOC,KAAKU,OAAOC,aAAaH,EAJzC,CACZI,sBAAuB,CAAEC,QAAS,QAOpCJ,EAAaK,OAAO,SAAUjB,KAK9B,IAAIkB,EAAS,IAAIhB,OAAOC,KAAKgB,OAAO,CAClCnB,IAAKA,IACLoB,YAAa,IAAIlB,OAAOC,KAAKkB,MAAM,GAAI,MAGzCT,EAAaU,YAAY,iBAAiB,WAExCJ,EAAOK,YAAW,GAClB,IAAIC,EAAQZ,EAAaa,WACzBC,QAAQC,IAAIH,EAAMI,oBAElB,IAAK,IAAIC,EAAI,EAAGA,EAAIL,EAAMI,mBAAmBE,OAAQD,IACnD,IAAK,IAAIE,EAAI,EAAGA,EAAIP,EAAMI,mBAAmBC,GAAGG,MAAMF,OAAQC,IAAK,CAIjE,GAH4C,WAAxCP,EAAMI,mBAAmBC,GAAGG,MAAMD,IACpCL,QAAQC,IAAIH,EAAMI,mBAAmBC,GAAGI,WAEE,+BAAxCT,EAAMI,mBAAmBC,GAAGG,MAAMD,GAAqC,CACzEL,QAAQC,IAAIH,EAAMI,mBAAmBC,GAAGK,YACxC,IAAIC,EAAeX,EAAMI,mBAAmBC,GAAGK,WAC/CE,EAAE/B,UAAUgC,OAAM,WAChBD,EAAE,yCAAyCE,IAAIH,EACjD,GACF,CACA,GAA4C,YAAxCX,EAAMI,mBAAmBC,GAAGG,MAAMD,GAAkB,CACtDL,QAAQC,IAAIH,EAAMI,mBAAmBC,GAAGI,WACxC,IAAIM,EAAcf,EAAMI,mBAAmBC,GAAGI,UAC9CG,EAAE/B,UAAUgC,OAAM,WAChBD,EAAE,wCAAwCE,IAAIC,EAChD,GACF,CACA,GAA4C,SAAxCf,EAAMI,mBAAmBC,GAAGG,MAAMD,GAAe,CACnDL,QAAQC,IAAIH,EAAMI,mBAAmBC,GAAGI,WACxC,IAAIO,EAAgBhB,EAAMI,mBAAmBC,GAAGI,UAChDG,EAAE/B,UAAUgC,OAAM,WAChBD,EAAE,0CAA0CE,IAAIE,EAClD,GACF,CACA,GAA4C,eAAxChB,EAAMI,mBAAmBC,GAAGG,MAAMD,GAAqB,CACzDL,QAAQC,IAAIH,EAAMI,mBAAmBC,GAAGI,WACxC,IAAIQ,EAAiBjB,EAAMI,mBAAmBC,GAAGI,UACjDG,EAAE/B,UAAUgC,OAAM,WAChBD,EAAE,6BAA6BE,IAAIG,GACnCL,EAAE,4CAA4CE,IAAIG,EACpD,GACF,CACF,CAEF,IAAIC,EAAalB,EAAMmB,kBAMvB,GAJAP,EAAE/B,UAAUgC,OAAM,WAChBD,EAAE,2CAA2CE,IAAII,EACnD,IAEKlB,EAAMoB,SAAX,CAUIpB,EAAMoB,SAASC,SACjB7C,IAAI8C,UAAUtB,EAAMoB,SAASG,UAE7B/C,IAAIgD,UAAUxB,EAAMoB,SAASC,UAE/B3B,EAAO+B,YAAYzB,EAAMoB,SAASG,UAClC7B,EAAOK,YAAW,GAGdC,EAAMI,oBACE,CACPJ,EAAMI,mBAAmB,IACxBJ,EAAMI,mBAAmB,GAAGM,YAC5B,GACDV,EAAMI,mBAAmB,IACxBJ,EAAMI,mBAAmB,GAAGM,YAC5B,GACDV,EAAMI,mBAAmB,IACxBJ,EAAMI,mBAAmB,GAAGM,YAC5B,IACFgB,KAAK,IAvBT,MAJEC,OAAOC,MACL,yBAA2B5B,EAAM6B,KAAO,8BAiC9C,GACF,CAEAF,OAAOlD,QAAUA","sourcesContent":["var map;\r\nfunction initMap() {\r\n  map = new google.maps.Map(document.getElementById(\"map\"), {\r\n    center: { lat: -33.8688, lng: 151.2195 },\r\n    zoom: 13,\r\n  });\r\n  // Autocomplete restrictions\r\n  var options = {\r\n    componentRestrictions: { country: \"us\" },\r\n  };\r\n  var input = document.getElementById(\"pac_input\");\r\n  var autocomplete = new google.maps.places.Autocomplete(input, options);\r\n  // Bind the map's bounds (viewport) property to the autocomplete object,\r\n  // so that the autocomplete requests use the current map bounds for the\r\n  // bounds option in the request.\r\n  autocomplete.bindTo(\"bounds\", map);\r\n\r\n  //infowindow = new google.maps.InfoWindow();\r\n  //infowindowContent = document.getElementById('infowindow-content');\r\n  //infowindow.setContent(infowindowContent);\r\n  var marker = new google.maps.Marker({\r\n    map: map,\r\n    anchorPoint: new google.maps.Point(0, -29),\r\n  });\r\n\r\n  autocomplete.addListener(\"place_changed\", function () {\r\n    // infowindow.close();\r\n    marker.setVisible(false);\r\n    var place = autocomplete.getPlace();\r\n    console.log(place.address_components);\r\n    // parse address\r\n    for (var i = 0; i < place.address_components.length; i++) {\r\n      for (var j = 0; j < place.address_components[i].types.length; j++) {\r\n        if (place.address_components[i].types[j] == \"country\") {\r\n          console.log(place.address_components[i].long_name); // country\r\n        }\r\n        if (place.address_components[i].types[j] == \"administrative_area_level_1\") {\r\n          console.log(place.address_components[i].short_name); // state\r\n          var parsed_state = place.address_components[i].short_name;\r\n          $(document).ready(function () {\r\n            $('input[name=\"original_property_state\"]').val(parsed_state);\r\n          });\r\n        }\r\n        if (place.address_components[i].types[j] == \"locality\") {\r\n          console.log(place.address_components[i].long_name); // city\r\n          var parsed_city = place.address_components[i].long_name;\r\n          $(document).ready(function () {\r\n            $('input[name=\"original_property_city\"]').val(parsed_city);\r\n          });\r\n        }\r\n        if (place.address_components[i].types[j] == \"route\") {\r\n          console.log(place.address_components[i].long_name); // street\r\n          var parsed_street = place.address_components[i].long_name;\r\n          $(document).ready(function () {\r\n            $('input[name=\"original_property_street\"]').val(parsed_street);\r\n          });\r\n        }\r\n        if (place.address_components[i].types[j] == \"postal_code\") {\r\n          console.log(place.address_components[i].long_name); // postal_code\r\n          var parsed_zipcode = place.address_components[i].long_name;\r\n          $(document).ready(function () {\r\n            $('input[name=\"postal_code\"]').val(parsed_zipcode);\r\n            $('input[name=\"original_property_zip_code\"]').val(parsed_zipcode);\r\n          });\r\n        }\r\n      }\r\n    }\r\n    var inputValue = place.formatted_address;\r\n    // Mirror autocomplete value to its respective inputs\r\n    $(document).ready(function () {\r\n      $('input[name=\"original_property_address\"]').val(inputValue);\r\n    });\r\n\r\n    if (!place.geometry) {\r\n      // User entered the name of a Place that was not suggested and\r\n      // pressed the Enter key, or the Place Details request failed.\r\n      window.alert(\r\n        \"Can't find location: '\" + place.name + \"', in the autocomplete list\"\r\n      );\r\n      return;\r\n    }\r\n\r\n    // If the place has a geometry, then present it on a map.\r\n    if (place.geometry.viewport) {\r\n      map.setCenter(place.geometry.location);\r\n    } else {\r\n      map.fitBounds(place.geometry.viewport);\r\n    }\r\n    marker.setPosition(place.geometry.location);\r\n    marker.setVisible(true);\r\n\r\n    var address = \"\";\r\n    if (place.address_components) {\r\n      address = [\r\n        (place.address_components[0] &&\r\n          place.address_components[0].short_name) ||\r\n          \"\",\r\n        (place.address_components[1] &&\r\n          place.address_components[1].short_name) ||\r\n          \"\",\r\n        (place.address_components[2] &&\r\n          place.address_components[2].short_name) ||\r\n          \"\",\r\n      ].join(\" \");\r\n    }\r\n\r\n    //infowindowContent.children['place-icon'].src = place.icon;\r\n    //infowindowContent.children['place-name'].textContent = place.name;\r\n    //infowindowContent.children['place-address'].textContent = address;\r\n    //infowindow.open(map, marker);\r\n  });\r\n}\r\n\r\nwindow.initMap = initMap;\r\n"]}