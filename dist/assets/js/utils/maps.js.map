{"version":3,"file":"maps.js","names":["map","initMap","console","log","google","maps","Map","document","getElementById","center","lat","lng","zoom","input","autocomplete","places","Autocomplete","componentRestrictions","country","bindTo","infowindow","InfoWindow","infowindowContent","setContent","marker","Marker","anchorPoint","Point","addListener","close","setVisible","place","getPlace","inputValue","name","formatted_address","$","ready","val","geometry","viewport","fitBounds","setCenter","location","setZoom","setPosition","address","address_components","short_name","join","children","src","icon","textContent","open","window","alert","renderMap","loadScript","this"],"sources":["maps.js"],"mappings":"AAAA,IAAIA,IAEJ,SAASC,UACPC,QAAQC,IAAI,gBACZH,IAAM,IAAII,OAAOC,KAAKC,IAAIC,SAASC,eAAe,OAAQ,CACxDC,OAAQ,CAACC,KAAM,QAASC,IAAK,UAC7BC,KAAM,KAGR,IAGIC,EAAQN,SAASC,eAAe,aAChCM,EAAe,IAAIV,OAAOC,KAAKU,OAAOC,aAAaH,EAJzC,CACZI,sBAAuB,CAAEC,QAAS,QAOpCJ,EAAaK,OAAO,SAAUnB,KAE9BoB,WAAa,IAAIhB,OAAOC,KAAKgB,WAC7BC,kBAAoBf,SAASC,eAAe,sBAC5CY,WAAWG,WAAWD,mBACtB,IAAIE,EAAS,IAAIpB,OAAOC,KAAKoB,OAAO,CAClCzB,IAAKA,IACL0B,YAAa,IAAItB,OAAOC,KAAKsB,MAAM,GAAI,MAGzCb,EAAac,YAAY,iBAAiB,WACxCR,WAAWS,QACXL,EAAOM,YAAW,GAClB,IAAIC,EAAQjB,EAAakB,WACrBC,EAAaF,EAAMG,KAAO,IAAMH,EAAMI,kBAO1C,GANAjC,QAAQC,IAAI8B,GAEZG,EAAE7B,UAAU8B,OAAM,WAChBD,EAAE,0BAA0BE,IAAIL,EAAWK,MAC7C,IAEKP,EAAMQ,SAAX,CAQIR,EAAMQ,SAASC,SACjBxC,IAAIyC,UAAUV,EAAMQ,SAASC,WAE7BxC,IAAI0C,UAAUX,EAAMQ,SAASI,UAC7B3C,IAAI4C,QAAQ,KAEdpB,EAAOqB,YAAYd,EAAMQ,SAASI,UAClCnB,EAAOM,YAAW,GAElB,IAAIgB,EAAU,GACVf,EAAMgB,qBACRD,EAAU,CACPf,EAAMgB,mBAAmB,IAAMhB,EAAMgB,mBAAmB,GAAGC,YAAc,GACzEjB,EAAMgB,mBAAmB,IAAMhB,EAAMgB,mBAAmB,GAAGC,YAAc,GACzEjB,EAAMgB,mBAAmB,IAAMhB,EAAMgB,mBAAmB,GAAGC,YAAc,IAC1EC,KAAK,MAGT3B,kBAAkB4B,SAAS,cAAcC,IAAMpB,EAAMqB,KACrD9B,kBAAkB4B,SAAS,cAAcG,YAActB,EAAMG,KAC7DZ,kBAAkB4B,SAAS,iBAAiBG,YAAcP,EAC1D1B,WAAWkC,KAAKtD,IAAKwB,EAxBrB,MAFE+B,OAAOC,MAAM,oCAAsCzB,EAAMG,KAAO,IA2BpE,GACF,CAIAuB,UAAY,KACVC,WAAW,yHACXH,OAAOtD,QAAU0D,KAAK1D,OAAO","sourcesContent":["var map;\r\n\r\nfunction initMap() {\r\n  console.log(\"initMap call\")\r\n  map = new google.maps.Map(document.getElementById('map'), {\r\n    center: {lat: -33.8688, lng: 151.2195},\r\n    zoom: 13\r\n  });\r\n  // Autocomplete restrictions\r\n  var options = {\r\n    componentRestrictions: { country: \"us\" },\r\n  };\r\n  var input = document.getElementById('pac_input');\r\n  var autocomplete = new google.maps.places.Autocomplete(input, options);\r\n  // Bind the map's bounds (viewport) property to the autocomplete object,\r\n  // so that the autocomplete requests use the current map bounds for the\r\n  // bounds option in the request.\r\n  autocomplete.bindTo('bounds', map);\r\n\r\n  infowindow = new google.maps.InfoWindow();\r\n  infowindowContent = document.getElementById('infowindow-content');\r\n  infowindow.setContent(infowindowContent);\r\n  var marker = new google.maps.Marker({\r\n    map: map,\r\n    anchorPoint: new google.maps.Point(0, -29)\r\n  });\r\n\r\n  autocomplete.addListener('place_changed', function() {\r\n    infowindow.close();\r\n    marker.setVisible(false);\r\n    var place = autocomplete.getPlace();\r\n    var inputValue = place.name + \" \" + place.formatted_address;\r\n    console.log(inputValue);\r\n    // Mirror autocomplete value to inputs with name=location\r\n    $(document).ready(function () {\r\n      $('input[name=\"location\"]').val(inputValue.val());\r\n    });\r\n \r\n    if (!place.geometry) {\r\n      // User entered the name of a Place that was not suggested and\r\n      // pressed the Enter key, or the Place Details request failed.\r\n      window.alert(\"No details available for input: '\" + place.name + \"'\");\r\n      return;\r\n    }\r\n\r\n    // If the place has a geometry, then present it on a map.\r\n    if (place.geometry.viewport) {\r\n      map.fitBounds(place.geometry.viewport);\r\n    } else {\r\n      map.setCenter(place.geometry.location);\r\n      map.setZoom(17);  // Why 17? Because it looks good.\r\n    }\r\n    marker.setPosition(place.geometry.location);\r\n    marker.setVisible(true);\r\n\r\n    var address = '';\r\n    if (place.address_components) {\r\n      address = [\r\n        (place.address_components[0] && place.address_components[0].short_name || ''),\r\n        (place.address_components[1] && place.address_components[1].short_name || ''),\r\n        (place.address_components[2] && place.address_components[2].short_name || '')\r\n      ].join(' ');\r\n    }\r\n\r\n    infowindowContent.children['place-icon'].src = place.icon;\r\n    infowindowContent.children['place-name'].textContent = place.name;\r\n    infowindowContent.children['place-address'].textContent = address;\r\n    infowindow.open(map, marker);\r\n  });\r\n}\r\n\r\n//window.initMap = initMap;\r\n//google.maps.event.addDomListener(window, 'load', initMap);\r\nrenderMap = () => {\r\n  loadScript(\"https://maps.googleapis.com/maps/api/js?key=AIzaSyCBFtGp6YxnEqcABn4HciClPotDeresTzE&callback=initMap&libraries=places\");\r\n  window.initMap = this.initMap;\r\n}"]}