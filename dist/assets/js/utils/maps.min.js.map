{"version":3,"file":"maps.js","names":["map","initMap","google","maps","Map","document","getElementById","center","lat","lng","zoom","console","log","input","autocomplete","places","Autocomplete","componentRestrictions","country","bindTo","marker","Marker","anchorPoint","Point","addListener","setVisible","place","getPlace","address_components","geometry","inputValue","formatted_address","$","ready","val","i","length","j","types","long_name","short_name","parsed_state","parsed_city","parsed_street","parsed_zipcode","viewport","setCenter","location","fitBounds","setPosition","join","window","alert","name","loadEstimate","addEventListener","child","getElementsByClassName","jQuery","detach","appendTo","each","this","insertAfter","parent","find","onpaste","e","preventDefault"],"sources":["maps.js"],"mappings":"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","sourcesContent":["var map;\nfunction initMap() {\n  map = new google.maps.Map(document.getElementById(\"map\"), {\n    center: { lat: -33.8688, lng: 151.2195 },\n    zoom: 13,\n  });\n  // Autocomplete restrictions\n  var options = {\n    componentRestrictions: { country: \"us\" },\n  };\n  console.log('map loaded')\n  var input = document.getElementById(\"pac_input\");\n  var autocomplete = new google.maps.places.Autocomplete(input, options);\n  // Bind the map's bounds (viewport) property to the autocomplete object,\n  // so that the autocomplete requests use the current map bounds for the\n  // bounds option in the request.\n  autocomplete.bindTo(\"bounds\", map);\n\n  //infowindow = new google.maps.InfoWindow();\n  //infowindowContent = document.getElementById('infowindow-content');\n  //infowindow.setContent(infowindowContent);\n  var marker = new google.maps.Marker({\n    map: map,\n    anchorPoint: new google.maps.Point(0, -29),\n  });\n\n  autocomplete.addListener(\"place_changed\", function () {\n    // infowindow.close();\n    marker.setVisible(false);\n    var place = autocomplete.getPlace();\n    console.log(place.address_components);\n    if (!place.geometry) {\n      // User entered the name of a Place that was not suggested and\n      // pressed the Enter key, or the Place Details request failed.\n      window.alert(\n        \"Can't find location: '\" + place.name + \"', in the autocomplete list\"\n      );\n      return;\n    }\n    \n    var inputValue = place.formatted_address;\n    // Set input value of address field using Google API\n    $(document).ready(function () {\n      $('input[name=\"original_property_address\"]').val(inputValue);\n    });\n\n    // parse address\n    for (var i = 0; i < place.address_components.length; i++) {\n      for (var j = 0; j < place.address_components[i].types.length; j++) {\n        if (place.address_components[i].types[j] == \"country\") {\n          console.log(place.address_components[i].long_name); // country\n        }\n        if (place.address_components[i].types[j] == \"administrative_area_level_1\") {\n          console.log(place.address_components[i].short_name); // state\n          var parsed_state = place.address_components[i].short_name;\n          $(document).ready(function () {\n            $('input[name=\"original_property_state\"]').val(parsed_state);\n          });\n        }\n        if (place.address_components[i].types[j] == \"locality\") {\n          console.log(place.address_components[i].long_name); // city\n          var parsed_city = place.address_components[i].long_name;\n          $(document).ready(function () {\n            $('input[name=\"original_property_city\"]').val(parsed_city);\n          });\n        }\n        if (place.address_components[i].types[j] == \"route\") {\n          console.log(place.address_components[i].long_name); // street\n          var parsed_street = place.address_components[i].long_name;\n          $(document).ready(function () {\n            $('input[name=\"original_property_street\"]').val(parsed_street);\n          });\n        }\n        if (place.address_components[i].types[j] == \"postal_code\") {\n          console.log(place.address_components[i].long_name); // postal_code\n          var parsed_zipcode = place.address_components[i].long_name;\n          $(document).ready(function () {\n            $('input[name=\"postal_code\"]').val(parsed_zipcode);\n            $('input[name=\"original_property_zip_code\"]').val(parsed_zipcode);\n          });\n        }\n      }\n    }\n\n    // If the place has a geometry, then present it on a map.\n    if (place.geometry.viewport) {\n      map.setCenter(place.geometry.location);\n    } else {\n      map.fitBounds(place.geometry.viewport);\n    }\n    marker.setPosition(place.geometry.location);\n    marker.setVisible(true);\n\n    var address = \"\";\n    if (place.address_components) {\n      address = [\n        (place.address_components[0] &&\n          place.address_components[0].short_name) ||\n          \"\",\n        (place.address_components[1] &&\n          place.address_components[1].short_name) ||\n          \"\",\n        (place.address_components[2] &&\n          place.address_components[2].short_name) ||\n          \"\",\n      ].join(\" \");\n    }\n\n    //infowindowContent.children['place-icon'].src = place.icon;\n    //infowindowContent.children['place-name'].textContent = place.name;\n    //infowindowContent.children['place-address'].textContent = address;\n    //infowindow.open(map, marker);\n  });\n\n  loadEstimate()\n}\n\nfunction loadEstimate () {\n\n  // move .pac-container inside #input_wrap-location\nwindow.addEventListener(\"load\", function () {\n  var child = document.getElementsByClassName(\"pac-container\")[0];\n  jQuery(child).detach().appendTo(\"#input_wrap-location\");\n  console.log(\"pac_container loaded\")\n});\n\n// for non-chrome based browswers, move loading of $this script at the end of .pac-container\nwindow.addEventListener(\"load\", function () {\n  $(document).ready(function () {\n    $(\"#onload-estimate-js\").each(function () {\n      $(this).insertAfter($(this).parent().find(\".pac-container\"));\n      console.log(\"pac_mover loader\")\n    });\n  });\n});\n\n// prevent user from copy/pasting input values;\n// user must only select value from autocomplete\nconst pasted_input = document.getElementById(\"pac_input\");\npasted_input.onpaste = (e) => e.preventDefault();\n}\n\nwindow.initMap = initMap;\n"]}