{"version":3,"file":"maps_locations.js","names":["map","initMap","google","maps","Map","document","getElementById","center","lat","lng","zoom","input","autocomplete","places","Autocomplete","componentRestrictions","country","bindTo","locations_geocoder","locations_map","marker","Marker","anchorPoint","Point","addListener","setVisible","place","getPlace","console","log","address_components","i","length","j","types","long_name","short_name","parsed_state","$","ready","val","parsed_city","parsed_street","parsed_zipcode","inputValue","formatted_address","geometry","viewport","setCenter","location","fitBounds","setPosition","join","window","alert","name","locations_address","Geocoder","locations_map_options","LatLng","mapId","zoomControl","scaleControl","streetViewControl","fullscreenControl","mapTypeControl","navigationControl","mapTypeId","MapTypeId","ROADMAP","geocode","address","results","status","GeocoderStatus","OK","ZERO_RESULTS","infowindow","InfoWindow","content","position","title","icon","event","open"],"sources":["maps_locations.js"],"mappings":"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","sourcesContent":["var map;\r\nfunction initMap() {\r\n  map = new google.maps.Map(document.getElementById(\"map\"), {\r\n    center: { lat: -33.8688, lng: 151.2195 },\r\n    zoom: 13,\r\n  });\r\n  // Autocomplete restrictions\r\n  var options = {\r\n    componentRestrictions: { country: \"us\" },\r\n  };\r\n  var input = document.getElementById(\"pac_input\");\r\n  var autocomplete = new google.maps.places.Autocomplete(input, options);\r\n  // Bind the map's bounds (viewport) property to the autocomplete object,\r\n  // so that the autocomplete requests use the current map bounds for the\r\n  // bounds option in the request.\r\n  autocomplete.bindTo(\"bounds\", map);\r\n\r\n  //infowindow = new google.maps.InfoWindow();\r\n  //infowindowContent = document.getElementById('infowindow-content');\r\n  //infowindow.setContent(infowindowContent);\r\n  var marker = new google.maps.Marker({\r\n    map: map,\r\n    anchorPoint: new google.maps.Point(0, -29),\r\n  });\r\n\r\n  autocomplete.addListener(\"place_changed\", function () {\r\n    // infowindow.close();\r\n    marker.setVisible(false);\r\n    var place = autocomplete.getPlace();\r\n    console.log(place.address_components);\r\n    // parse address\r\n    for (var i = 0; i < place.address_components.length; i++) {\r\n      for (var j = 0; j < place.address_components[i].types.length; j++) {\r\n        if (place.address_components[i].types[j] == \"country\") {\r\n          console.log(place.address_components[i].long_name); // country\r\n        }\r\n        if (\r\n          place.address_components[i].types[j] == \"administrative_area_level_1\"\r\n        ) {\r\n          console.log(place.address_components[i].short_name); // state\r\n          var parsed_state = place.address_components[i].short_name;\r\n          $(document).ready(function () {\r\n            $('input[name=\"original_property_state\"]').val(parsed_state);\r\n          });\r\n        }\r\n        if (place.address_components[i].types[j] == \"locality\") {\r\n          console.log(place.address_components[i].long_name); // city\r\n          var parsed_city = place.address_components[i].long_name;\r\n          $(document).ready(function () {\r\n            $('input[name=\"original_property_city\"]').val(parsed_city);\r\n          });\r\n        }\r\n        if (place.address_components[i].types[j] == \"route\") {\r\n          console.log(place.address_components[i].long_name); // street\r\n          var parsed_street = place.address_components[i].long_name;\r\n          $(document).ready(function () {\r\n            $('input[name=\"original_property_street\"]').val(parsed_street);\r\n          });\r\n        }\r\n        if (place.address_components[i].types[j] == \"postal_code\") {\r\n          console.log(place.address_components[i].long_name); // postal_code\r\n          var parsed_zipcode = place.address_components[i].long_name;\r\n          $(document).ready(function () {\r\n            $('input[name=\"postal_code\"]').val(parsed_zipcode);\r\n            $('input[name=\"original_property_zip_code\"]').val(parsed_zipcode);\r\n          });\r\n        }\r\n      }\r\n    }\r\n    var inputValue = place.formatted_address;\r\n    // Mirror autocomplete value to its respective inputs\r\n    $(document).ready(function () {\r\n      $('input[name=\"original_property_address\"]').val(inputValue);\r\n    });\r\n\r\n    if (!place.geometry) {\r\n      // User entered the name of a Place that was not suggested and\r\n      // pressed the Enter key, or the Place Details request failed.\r\n      window.alert(\r\n        \"Can't find location: '\" + place.name + \"', in the autocomplete list\"\r\n      );\r\n      return;\r\n    }\r\n\r\n    // If the place has a geometry, then present it on a map.\r\n    if (place.geometry.viewport) {\r\n      map.setCenter(place.geometry.location);\r\n    } else {\r\n      map.fitBounds(place.geometry.viewport);\r\n    }\r\n    marker.setPosition(place.geometry.location);\r\n    marker.setVisible(true);\r\n\r\n    var address = \"\";\r\n    if (place.address_components) {\r\n      address = [\r\n        (place.address_components[0] &&\r\n          place.address_components[0].short_name) ||\r\n          \"\",\r\n        (place.address_components[1] &&\r\n          place.address_components[1].short_name) ||\r\n          \"\",\r\n        (place.address_components[2] &&\r\n          place.address_components[2].short_name) ||\r\n          \"\",\r\n      ].join(\" \");\r\n    }\r\n\r\n    //infowindowContent.children['place-icon'].src = place.icon;\r\n    //infowindowContent.children['place-name'].textContent = place.name;\r\n    //infowindowContent.children['place-address'].textContent = address;\r\n    //infowindow.open(map, marker);\r\n  });\r\n\r\n  // Locations map\r\n  var locations_geocoder;\r\n  var locations_map;\r\n  var locations_address = \"{{wf {&quot;path&quot;:&quot;address-details&quot;,&quot;type&quot;:&quot;PlainText&quot;} }}\";\r\n  var locations_image = \"https://uploads-ssl.webflow.com/631ada5b454cce3ae6474e07/63e3d8d5782ef44764b93261_icon_map-pin.svg\";\r\n\r\n  locations_geocoder = new google.maps.Geocoder();\r\n  var latlng = new google.maps.LatLng(44.85767897439299, -93.40209113112228);\r\n  var locations_map_options = {\r\n    zoom: 15,\r\n    center: latlng,\r\n    mapId: \"df2547a6ba8c2b01\",\r\n    zoomControl: true,\r\n    scaleControl: true,\r\n    streetViewControl: true,\r\n    fullscreenControl: false,\r\n    mapTypeControl: false,\r\n    navigationControl: true,\r\n    mapTypeId: google.maps.MapTypeId.ROADMAP,\r\n  };\r\n  locations_map = new google.maps.Map(document.getElementById(\"locations_map\"),locations_map_options);\r\n  if (locations_geocoder) {\r\n    locations_geocoder.geocode(\r\n      {\r\n        address: locations_address,\r\n      },\r\n      function (results, status) {\r\n        if (status == google.maps.GeocoderStatus.OK) {\r\n          if (status != google.maps.GeocoderStatus.ZERO_RESULTS) {\r\n            locations_map.setCenter(results[0].geometry.location);\r\n            var infowindow = new google.maps.InfoWindow({\r\n              content:\r\n                \"<p><b>\" +\r\n                \"{{wf {&quot;path&quot;:&quot;name&quot;,&quot;type&quot;:&quot;PlainText&quot;} }}\" +\r\n                \"</b></p><br><p>\" +\r\n                \"{{wf {&quot;path&quot;:&quot;address-details&quot;,&quot;type&quot;:&quot;PlainText&quot;} }}\" +\r\n                '</p><div style=\"border-top: 1px solid rgb(204, 204, 204); margin-top: 9px; padding: 6px; font-size: 13px; text-overflow: ellipsis; overflow: hidden; white-space: nowrap; font-family: Roboto, Arial;\"><a href=\"https://www.google.com/maps/search/?api=1&query={{wf {&quot;path&quot;:&quot;address-details&quot;,&quot;type&quot;:&quot;PlainText&quot;} }}\" target=\"_blank\" rel=\"noopener\" style=\"cursor: pointer; color: rgb(66, 127, 237); text-decoration: none;\">View on Google Maps</a></div>',\r\n            });\r\n\r\n            var marker = new google.maps.Marker({\r\n              position: results[0].geometry.location,\r\n              map: locations_map,\r\n              title: locations_address,\r\n              icon: locations_image,\r\n            });\r\n            google.maps.event.addListener(marker, \"click\", function () {\r\n              infowindow.open(locations_map, marker);\r\n            });\r\n          } else {\r\n            alert(\"No results found\");\r\n          }\r\n        } else {\r\n          alert(\r\n            \"Geocode was not successful for the following reason: \" + status\r\n          );\r\n        }\r\n      }\r\n    );\r\n  }\r\n}\r\n\r\nwindow.initMap = initMap;\r\n"]}