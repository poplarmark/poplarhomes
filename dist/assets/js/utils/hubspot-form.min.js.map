{"version":3,"file":"hubspot-form.js","names":["$","each","i","this","find","val","submit","e","preventDefault","parsedFormData","FormData","target","entries","map","dataObject","name","value","goToWebinarWebinarKey","input","sfdcCampaignId","hutk","document","cookie","replace","undefined","console","log","processingPrompt","communicationConsent","filter","item","includes","element","label","attr","checked","text","subscriptionTypeId","parseInt","split","ignoredFields","data","fields","ignoredField","context","pageUri","window","location","href","pageName","title","goToWebinarKey","legalConsentOptions","consent","consentToProcess","communications","final_data","JSON","stringify","ajax","url","action","type","dataType","contentType","accept","success","response","inlineMessage","parent","children","css","show","error","siblings"],"sources":["utils/hubspot-form.js"],"mappings":"AAAAA,EAAE,2CAA2CC,MAAK,SAAUC,GAE1DF,EAAEG,MAAMC,KAAK,wBAAwBC,IAAI,QACzCL,EAAEG,MAAMG,QAAO,SAAUC,GAEvBA,EAAEC,iBACF,MACMC,EAAiB,IADN,IAAIC,SAASH,EAAEI,QACIC,WAAWC,KAAKC,IAAe,CAEjEC,KAAMD,EAAW,GACjBE,MAAOF,EAAW,OAEdG,EAAwBR,EAAeL,MAC1Cc,GAAyB,0BAAfA,EAAMH,QAChBC,MACGG,EAAiBV,EAAeL,MACnCc,GAAyB,mBAAfA,EAAMH,QAChBC,MACGI,EACJC,SAASC,OAAOC,QACd,oDACA,YACGC,EACPC,QAAQC,IAAIN,GACZ,MAAMO,EAAmB3B,EAAEG,MAAMC,KAAK,kCAChCwB,EAAuBnB,EAC1BoB,QAAQC,GAASA,EAAKf,KAAKgB,SAAS,mBACpClB,KAAKiB,IAEJ,MAAME,EAAUhC,EACd,IAAI8B,EAAKf,KAAKQ,QAAQ,sBAAuB,WAC7C,GACIU,EAAQjC,EACZ,aACEA,EAAEgC,GACCE,KAAK,MACLX,QAAQ,sBAAuB,QAClC,MAEJ,MAAO,CACLP,MAAOgB,EAAQG,QACfC,KAAMH,EAAMG,OACZC,mBAAoBC,SAClBR,EAAKf,KAAKwB,MAAM,oCAAoC,IAEvD,IAECC,EAAgB,CACpB,SACA,YACA,OACA,gBACA,wBACA,kBAEIC,EAAO,CAEXC,OAAQjC,EAAeoB,QACpBC,IACEU,EAAcpC,MAAMuC,GACnBb,EAAKf,KAAKgB,SAASY,OAGzBC,QAAS,CACPC,QAASC,OAAOC,SAASC,KACzBC,SAAU5B,SAAS6B,MACnB/B,eAAgBA,EAChBgC,eAAgBlC,EAChBG,KAAMA,MAEHO,EAED,CACEyB,oBAAqB,CACnBC,QAAS,IACF1B,EAED,CACE2B,kBAAkB,EAClBlB,KAAMT,EAAiBS,QAHzB,CAAC,KAKAR,EAED,CACE2B,eAAgB3B,GAFlB,CAAC,KAXX,CAAC,GAmBD4B,EAAaC,KAAKC,UAAUjB,GAClCzC,EAAE2D,KAAK,CACLC,IAAKrD,EAAEI,OAAOkD,OACdC,KAAM,OACNC,SAAU,OACVtB,KAAMe,EACNQ,YAAa,iCACbC,OAAQ,mBACRC,QAAS,SAAUC,GACjB,GAAIA,GACEA,EAASC,cAAe,CAC1B,MAAMC,EAASrE,EAAEO,EAAEI,QAAQ0D,SAC3BA,EAAOC,SAAS,QAAQC,IAAI,UAAW,QACvCF,EAAOC,SAAS,gBAAgBE,MAClC,CAEJ,EACAC,MAAO,WACHhD,QAAQC,IAAI,gCACZ1B,EAAEO,EAAEI,QAAQ4D,IAAI,UAAW,QAAQG,SAAS,gBAAgBF,MAChE,GAEJ,GACF","sourcesContent":["$('form[action^=\"https://api.hsforms.com\"]').each(function (i) {\r\n  // intercept forms whos action goes to hubspot\r\n  $(this).find(\"input[type=checkbox]\").val(\"true\");\r\n  $(this).submit(function (e) {\r\n    // when the form submits\r\n    e.preventDefault(); //stop the form from submitting to webflow\r\n    const formData = new FormData(e.target); // get the form data\r\n    const parsedFormData = [...formData.entries()].map((dataObject) => ({\r\n      // convert data to array\r\n      name: dataObject[0], // make sure the name of the input is the same as the hubspot input name\r\n      value: dataObject[1], // the value of the input\r\n    }));\r\n    const goToWebinarWebinarKey = parsedFormData.find(\r\n      (input) => input.name === \"goToWebinarWebinarKey\"\r\n    )?.value; // looks for an input with the name goToWebinarWebinarKey\r\n    const sfdcCampaignId = parsedFormData.find(\r\n      (input) => input.name === \"sfdcCampaignId\"\r\n    )?.value; // looks for an input with the name sfdcCampaignId\r\n    const hutk =\r\n      document.cookie.replace(\r\n        /(?:(?:^|.*;\\s*)hubspotutk\\s*\\=\\s*([^;]*).*$)|^.*$/,\r\n        \"$1\"\r\n      ) || undefined; // looks for an input with the name hutk, the hubspot user token\r\n    console.log(hutk);\r\n    const processingPrompt = $(this).find(\"[id*='gdpr-processing-prompt']\"); // looks for an element with the id gdpr-processing-prompt\r\n    const communicationConsent = parsedFormData\r\n      .filter((item) => item.name.includes(\"LEGAL_CONSENT\"))\r\n      .map((item) => {\r\n        // finds LEGAL_CONSENT options and stores them\r\n        const element = $(\r\n          `#${item.name.replace(/(:|\\.|\\[|\\]|,|=|@)/g, \"\\\\$1\")}`\r\n        )[0]; // checks if they've checked the checkbox to consent\r\n        const label = $(\r\n          \"span[for='\" +\r\n            $(element)\r\n              .attr(\"id\")\r\n              .replace(/(:|\\.|\\[|\\]|,|=|@)/g, \"\\\\$1\") +\r\n            \"']\"\r\n        ); // gets the label of the checkbox\r\n        return {\r\n          value: element.checked,\r\n          text: label.text(),\r\n          subscriptionTypeId: parseInt(\r\n            item.name.split(\"LEGAL_CONSENT.subscription_type_\")[1]\r\n          ), // the subscription the user is consenting to\r\n        };\r\n      });\r\n    const ignoredFields = [\r\n      \"cc-num\",\r\n      \"cc-number\",\r\n      \"gdpr\",\r\n      \"LEGAL_CONSENT\",\r\n      \"goToWebinarWebinarKey\",\r\n      \"sfdcCampaignId\",\r\n    ];\r\n    const data = {\r\n      // the data we send to hubspot\r\n      fields: parsedFormData.filter(\r\n        (item) =>\r\n          !ignoredFields.find((ignoredField) =>\r\n            item.name.includes(ignoredField)\r\n          )\r\n      ), // set the form data but ignore certain fields\r\n      context: {\r\n        pageUri: window.location.href, // log the current url\r\n        pageName: document.title, // log the pages title\r\n        sfdcCampaignId: sfdcCampaignId, // salesforce campaign id\r\n        goToWebinarKey: goToWebinarWebinarKey, // go to meeting key\r\n        hutk: hutk, // hubspot user token\r\n      },\r\n      ...(!processingPrompt\r\n        ? {}\r\n        : {\r\n            legalConsentOptions: {\r\n              consent: {\r\n                ...(!processingPrompt\r\n                  ? {}\r\n                  : {\r\n                      consentToProcess: true,\r\n                      text: processingPrompt.text(),\r\n                    }),\r\n                ...(!communicationConsent\r\n                  ? {}\r\n                  : {\r\n                      communications: communicationConsent,\r\n                    }),\r\n              },\r\n            },\r\n          }),\r\n    };\r\n    const final_data = JSON.stringify(data); // turn that javascript object into a json string\r\n    $.ajax({\r\n      url: e.target.action,\r\n      type: \"POST\",\r\n      dataType: \"json\",\r\n      data: final_data,\r\n      contentType: \"application/json;charset=utf-8\",\r\n      accept: \"application/json\",\r\n      success: function (response) {\r\n        if (response) {\r\n          if (response.inlineMessage) {\r\n            const parent = $(e.target).parent();\r\n            parent.children(\"form\").css(\"display\", \"none\") // hide form\r\n            parent.children(\".w-form-done\").show(); // replace .w-form-done with your own form done section\r\n          }\r\n        }\r\n      },\r\n      error: function () {\r\n          console.log(\"error on the form submission\")\r\n          $(e.target).css('display', 'none').siblings('.w-form-fail').show() // replace .w-form-fail with your own form done section\r\n      }\r\n    });\r\n  });\r\n});"]}